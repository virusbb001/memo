# perlのモジュール欲しいがインストールできないとき

pureperl版がないか探してみる  
JSONの例でやってみる  

1. [CPANのJSON.pm](http://search.cpan.org/~makamaka/JSON-2.57/lib/JSON.pm)
2. 同じ作者で他に無いか見てみる[MAKAMAKA氏](http://search.cpan.org/~makamaka/)
3. 有りました[JSON::PP JSON::XS compatible pure-Perl module.]("http://search.cpan.org/~makamaka/JSON-PP-2.27202/")
4. ダウンロード/展開
5. libを何処かにコピー
6. 読み込んだものを読みこむよう設定
7. 使える やったね！

# 文字コードについて #
## 基本 ##
1. 外部から入力された文字コードはデコードして内部文字コードに
2. 出力する文字はエンコードする
## open ##
"モード:文字コード"で指定できる
utf8なら`utf8`,それ以外なら`encoding(文字コード)`
## 内部文字列 ##
Perlが内部的に保持している変数 flagged UTF8
## UTF-8バイナリ ##
文字列をUTF8エンコーディングしたバイナリ列

## Encode ##
`Encode::decode("文字コード",文字列)`で内部文字コードが得られる  
`Encode::encode("文字コード",文字列)`で変換したものが得られる  

# 特殊なブロック #
## BEGIN ##

```perl
BEGIN{
 # ここにPerlのスクリプト
}
```

最初に実行されるブロック  
複数あるとき上から順に実行される  

## END ##
BEGINブロックと書き方は同じ  
複数あるとき下から実行される  

# オブジェクト指向/モジュール作成 #

| オブジェクト指向           | Perl         |
|:---------------------------|:-------------|
| クラス                     | パッケージ   |
| オブジェクト(インスタンス) | データ構造   |
| メソッド                   | サブルーチン |

## モジュール作成 ##
パッケージ名を`subdir::subdir::Package;`に指定する(subdirは`@INC`のサブディレクトリ(のサブディレクトリ))  
ファイル名を`Package.pm`にする.  

## メソッド ##

* classMethodのとき第一引数がクラスになる(`Package->func();`)
* instanceMethodのとき第一引数が呼び出したインスタンスになる(`$instance->func();`)

区別の方法はないから引数を見て警告を出すとかしなければいけない  

## 作ったモジュールを適当に配置して使う ##
使いたいスクリプトで`use lib 'path';`とすれば指定できる

<!-- vim: set ft=markdown : -->
