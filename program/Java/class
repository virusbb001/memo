クラスの包含
 A:
 class A_Class{
  B_Class B;
  public A_Class(){
   B=new B_Class();
  }
 }

 A_Classのインスタンスが存在する間はずっとB_Classのインスタンスも存在する
 B_Classのインスタンスが無ければA_Classは機能しなくなる
 コンストラクタでインスタンスが作られる場合が多い

 B:
 class A_Class{
  B_Class pB;
 }

 B_Classのインスタンスは会ってもなくても機能する
 インスタンスは適当な所で作られる

継承
 class B_Class{
 }

 class A_Class extends B_Class{
 }

 A_Class:B_Classの子クラス,サブクラス,派生クラス
 B_Class:A_Classの親クラス,スーパークラス,基底クラス

 //これは実行できる

 B_Class b=new A_Class(); //親=new 子 これはできる
 A_Class a=new B_Class(); //子=new 親 できない

 A初期化時にsuper()を使用する場合一番最初にしなければならない


abstract
 abstract class ClassName{
  abstract public void func();
 }

 メソッドの定義だけしておきそのクラスでは実装しない(子クラスで実装する)
 このため完成してないクラスとなりインスタンスは作れない
 このようなクラスはclass宣言にもabstractを必要とする


継承と包含
 以下の条件に全て当てはまれば継承
 それ以外であれば包含
  既存クラスの一種(kind of)か？
   基底クラスの一種でないものは派生クラスにするべきではない
  機能の追加
   もともと低機能なクラスを基底クラスにするべき
  派生系列に矛盾はないか
   今までは分類で派生してきた(例:哺乳類->(犬,猫))のに、新しく派生したものは機能で分類(例:犬->(盲導犬,警察犬))してないか
  既存のクラスを派生クラスにした場合、基底クラスや他のクラスに変更を加える必要はないか
  わけの分からない(無用な)機能の追加ではないか
